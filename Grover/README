CS 239: Quantum Programming (UCLA) | Jens Palsberg | Winter 2021

Problem Statement: Grover's problem:
    Input: a function f : {0, 1}^n → {0, 1}
    Output: 1 if there exists x ∈ {0, 1}^n such that f(x) = 1, and 0 otherwise
    Notation: {0, 1}^n is the set of bit strings of length n  

Implementation Language: Python3
Dependencies: random

Testing:
    The function test_generator(num_tests) can be used to test the implementation that solves grover's problem. It takes as input the number of tests to be run. The function generates a random value between 3 and 20 to be used as n, the length of the bit string. Then grover is called with the following functions:
    - a constant function that always returns 0 
    - a constant function that always returns 1
    - a function that returns 1 only for a golden value, randomly chosen to be between 0 and 2^n-1 (called for num_tests iterations) 
    - a function that returns 1 x times, with x being randomly generated to be between 2 and 2^n-1 (called for num_tests iterations)
